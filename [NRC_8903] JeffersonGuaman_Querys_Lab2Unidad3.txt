-- TABLA FACT_SALES

SELECT invoice_items.InvoiceLineId as FactId,
      invoices.InvoiceId, customers.CustomerId, 
      customers.SupportRepId as EmployeeId, 
      invoice_items.TrackId, 
      artists.ArtistId,customers.CustomerId as LocationId, 
      strftime('%Y%m%d', datetime(invoices.InvoiceDate)) as TimeId, 
      invoice_items.UnitPrice*invoice_items.Quantity as Price 
      FROM invoice_items 
        INNER JOIN invoices  ON invoices.InvoiceId = invoice_items.InvoiceId
        INNER JOIN customers  ON customers.CustomerId = invoices.CustomerId
        INNER JOIN tracks  ON tracks.TrackId = invoice_items.TrackId
        INNER JOIN albums  ON albums.AlbumId = tracks.AlbumId
        INNER JOIN artists  ON artists.ArtistId = albums.ArtistId
        ORDER BY 1;

-- TABLA DIM_CUSTOMERS

SELECT 
        CustomerId, 
        FirstName, 
        LastName, 
        CASE
           WHEN Company is NOT NULL then Company
        ELSE 'NA'
        END
        Company,
        Address, 
        City, 
        CASE
           WHEN State is NOT NULL then State
        ELSE 'NA'
        END
        State,
        Country, 
       CASE
          WHEN PostalCode is NOT NULL then PostalCode 
       ELSE 'NA'
       END
       PostalCode,
        CASE
           WHEN Phone is NOT NULL then Phone
        ELSE 'NA'
        END
        Phone,
        CASE
           WHEN Fax is NOT NULL then Fax
        ELSE 'NA'
        END
        Fax,
        Email 
        FROM customers;

-- TABLA DIM_EMPLOYEES

EmployeeId, 
        LastName, 
        FirstName, 
        Title, 
        BirthDate, 
        HireDate, 
        Address, 
        City, 
        State, 
        Country, 
        PostalCode, 
        Phone, 
        Fax, 
        Email 
        FROM employees;

-- TABLA DIM_LOCATION

CustomerId as LocationId, 
        Address, 
        City, 
        CASE
           WHEN State is NOT NULL then State
        ELSE 'NA'
        END
        State,
        Country, 
        CASE
           WHEN PostalCode is NOT NULL then PostalCode 
        ELSE 'NA'
        END
        PostalCode 
        FROM customers;


-- TABLA DIM_TRACKS

SELECT tracks.TrackId, 
        tracks.Name as TrackName,
        albums.Title as Album, 
        genres.Name as Genre, 
        media_types.Name as MediaType, 
        CASE
           WHEN tracks.Composer is NOT NULL then tracks.Composer
        ELSE 'NA'
        END
        Composer,
        tracks.Milliseconds,
        tracks.Bytes, tracks.UnitPrice as Price 
        FROM tracks 
        JOIN albums on tracks.AlbumId = albums.AlbumId
        JOIN genres  on tracks.GenreId = genres.GenreId
        JOIN media_types  on media_types.MediaTypeId = tracks.MediaTypeId
        ORDER BY 1;

-- TABLA DIM_ARTISTS

SELECT ArtistId, Name as ArtistName FROM artists ;

-- TABLA DIM_TIME 

ALTER TABLE public.dim_time ADD CONSTRAINT d_date_date_dim_id_pk PRIMARY KEY (date_dim_id);

CREATE INDEX d_date_date_actual_idx
  ON dim_time(date_actual);

COMMIT;

INSERT INTO dim_time
SELECT TO_CHAR(datum, 'yyyymmdd')::INT AS date_dim_id,
       datum AS date_actual,
       EXTRACT(EPOCH FROM datum) AS epoch,
       TO_CHAR(datum, 'fmDDth') AS day_suffix,
       TO_CHAR(datum, 'TMDay') AS day_name,
       EXTRACT(ISODOW FROM datum) AS day_of_week,
       EXTRACT(DAY FROM datum) AS day_of_month,
       datum - DATE_TRUNC('quarter', datum)::DATE + 1 AS day_of_quarter,
       EXTRACT(DOY FROM datum) AS day_of_year,
       TO_CHAR(datum, 'W')::INT AS week_of_month,
       EXTRACT(WEEK FROM datum) AS week_of_year,
       EXTRACT(ISOYEAR FROM datum) || TO_CHAR(datum, '"-W"IW-') || EXTRACT(ISODOW FROM datum) AS week_of_year_iso,
       EXTRACT(MONTH FROM datum) AS month_actual,
       TO_CHAR(datum, 'TMMonth') AS month_name,
       TO_CHAR(datum, 'Mon') AS month_name_abbreviated,
       EXTRACT(QUARTER FROM datum) AS quarter_actual,
       CASE
           WHEN EXTRACT(QUARTER FROM datum) = 1 THEN 'First'
           WHEN EXTRACT(QUARTER FROM datum) = 2 THEN 'Second'
           WHEN EXTRACT(QUARTER FROM datum) = 3 THEN 'Third'
           WHEN EXTRACT(QUARTER FROM datum) = 4 THEN 'Fourth'
           END AS quarter_name,
       EXTRACT(YEAR FROM datum) AS year_actual,
       datum + (1 - EXTRACT(ISODOW FROM datum))::INT AS first_day_of_week,
       datum + (7 - EXTRACT(ISODOW FROM datum))::INT AS last_day_of_week,
       datum + (1 - EXTRACT(DAY FROM datum))::INT AS first_day_of_month,
       (DATE_TRUNC('MONTH', datum) + INTERVAL '1 MONTH - 1 day')::DATE AS last_day_of_month,
       DATE_TRUNC('quarter', datum)::DATE AS first_day_of_quarter,
       (DATE_TRUNC('quarter', datum) + INTERVAL '3 MONTH - 1 day')::DATE AS last_day_of_quarter,
       TO_DATE(EXTRACT(YEAR FROM datum) || '-01-01', 'YYYY-MM-DD') AS first_day_of_year,
       TO_DATE(EXTRACT(YEAR FROM datum) || '-12-31', 'YYYY-MM-DD') AS last_day_of_year,
       TO_CHAR(datum, 'mmyyyy') AS mmyyyy,
       TO_CHAR(datum, 'mmddyyyy') AS mmddyyyy,
       CASE
           WHEN EXTRACT(ISODOW FROM datum) IN (6, 7) THEN TRUE
           ELSE FALSE
           END AS weekend_indr
FROM (SELECT '2009-01-01'::DATE + SEQUENCE.DAY AS datum
      FROM GENERATE_SERIES(0, 5477) AS SEQUENCE (DAY)
      GROUP BY SEQUENCE.DAY) DQ
ORDER BY 1;

COMMIT;